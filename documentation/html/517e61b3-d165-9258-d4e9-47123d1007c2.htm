<!DOCTYPE html >
<html lang="en-US">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" href="../css/bulma.css" />
    <link rel="stylesheet" href="../css/font-awesome.min.css" />
    <link rel="stylesheet" href="../css/presentationStyle.css" />
    <link rel="stylesheet" href="../css/vs.min.css" />
    <script src="../scripts/jquery-3.5.1.min.js"></script>
    <script src="../scripts/clipboard.min.js"></script>
    <script src="../scripts/highlight.min.js"></script>
    <script src="../scripts/presentationStyle.js"></script>
    <title>ZebraBarcodeFactory Class</title>
    <meta name="Title" content="ZebraBarcodeFactory" />
    <meta name="Help.Id" content="T:Zebra.Sdk.Card.Graphics.Barcode.ZebraBarcodeFactory" />
    <meta name="Help.ContentType" content="Reference" />
    <meta name="container" content="Zebra.Sdk.Card.Graphics.Barcode" />
    <meta name="guid" content="517e61b3-d165-9258-d4e9-47123d1007c2" />
    <meta name="Description" content="Factory used to acquire an instance of a font specific barcode object." />
    <meta name="tocFile" content="../toc/IDHB.xml" />
  </head>
  <body>
    <div class="fixedLayout">
      <div id="Header" class="fixedHeader">
        <div class="pageHeader level mb-0 py-2 px-4">
          <div id="TitleContainer" class="level-left">
            <div id="DocumentationTitle" class="level-item">Zebra API (build v3.01.332)</div>
          </div>
          <div id="LangFilterSearchContainer" class="level-right">
            <div class="level-item">
              <div class="dropdown is-hoverable">
                <div class="dropdown-trigger">
                  <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                    <span id="CurrentLanguage"></span>
                    <span class="icon is-small">
                      <i class="fa fa-angle-down" aria-hidden="true"></i>
                    </span>
                  </button>
                </div>
                <div class="dropdown-menu" role="menu">
                  <div id="LanguageSelections" class="dropdown-content">
                    <a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a>
                  </div>
                </div>
              </div>
            </div>
            <div class="level-item">
              <form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;">
                <div class="field">
                  <div class="control has-icons-left">
                    <input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" />
                    <span class="icon is-small is-left">
                      <i class="fa fa-search"></i>
                    </span>
                    <button id="SearchButton" type="submit" class="is-hidden"></button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <div class="fixedContent">
        <nav class="breadcrumb my-1 px-2 border-bottom" role="navigation">
          <ul id="TopicBreadcrumbs" />
        </nav>
        <div class="columns pl-5 pr-5 fixedContent">
          <div id="ShowHideTOCColumn" class="column is-hidden-tablet">
            <a id="ShowHideTOC">Show/Hide TOC</a>
          </div>
          <div id="TOCColumn" class="column is-hidden-mobile">
            <nav class="toc">
              <ul id="TableOfContents" class="toc-menu" />
            </nav>
          </div>
          <div id="TopicContent" class="column content is-7">
            <h1>Zebra<wbr />Barcode<wbr />Factory Class</h1>
            <div class="summary">
            Factory used to acquire an instance of a font specific barcode object.
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Definition</h2>
            <div id="IDBSection">
              <strong>Namespace:</strong> <a href="bf2c7383-dfa8-637b-5ee9-0d805370e317.htm">Zebra.Sdk.Card.Graphics.Barcode</a><br /><strong>Assembly:</strong> SdkApi.Card.Desktop (in SdkApi.Card.Desktop.dll) Version: 3.01.332<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">ZebraBarcodeFactory</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">ZebraBarcodeFactory</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">ZebraBarcodeFactory</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><span class="noLink">Object</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">ZebraBarcodeFactory</span></dd></dl></div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Example</h2>
            <div id="IDBCSection">
              <div class="codeSnippet">
                <div class="codeHeader">
                  <span class="codeHeaderTitle">C#</span>
                  <button class="button is-small is-light copyCode" title="Copy">
                    <span class="icon is-small">
                      <i class="fa fa-copy"></i>
                    </span>
                    <span>Copy</span>
                  </button>
                </div>
                <div class="codePanel hljs">
                  <pre xml:space="preserve">
                    <code class="language-cs">using System;
using System.Collections.Generic;
using System.Threading;
using Zebra.Sdk.Card.Containers;
using Zebra.Sdk.Card.Enumerations;
using Zebra.Sdk.Card.Graphics;
using Zebra.Sdk.Card.Graphics.Barcode;
using Zebra.Sdk.Card.Job;
using Zebra.Sdk.Card.Printer;
using Zebra.Sdk.Comm;

public class PrintBarcodeExample {

    private const int CARD_FEED_TIMEOUT = 30000;

    public static void Main(string[] args) {
        Connection connection = null;
        ZebraCardPrinter zebraCardPrinter = null;

        try {
            connection = new TcpConnection("1.2.3.4", 9100);
            connection.Open();

            zebraCardPrinter = ZebraCardPrinterFactory.GetInstance(connection);

            List&lt;GraphicsInfo&gt; graphicsData = new List&lt;GraphicsInfo&gt;() {
                DrawGraphics(zebraCardPrinter)
            };

            zebraCardPrinter.SetJobSetting(ZebraCardJobSettingNames.K_OPTIMIZATION_FRONT, "Barcode");

            // Send job
            int jobId = zebraCardPrinter.Print(1, graphicsData);

            // Poll job status
            JobStatusInfo jobStatus = PollJobStatus(jobId, zebraCardPrinter);
            Console.WriteLine($"Job {jobId} completed with status '{jobStatus.PrintStatus}'.");
        } catch (Exception e) {
            Console.WriteLine($"Error printing barcode image: {e.Message}");
        } finally {
            CloseQuietly(connection, zebraCardPrinter);
        }
    }

    #region Graphics
    /// &lt;exception cref="ConnectionException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="System.IO.IOException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="NotSupportedException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="System.Security.SecurityException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="UnauthorizedAccessException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;
    private static GraphicsInfo DrawGraphics(ZebraCardPrinter zebraCardPrinter) {
        // Generate image data
        using (ZebraGraphics graphics = new ZebraCardGraphics(zebraCardPrinter)) {
            graphics.Initialize(0, 0, OrientationType.Landscape, PrintType.MonoK, null);
            DrawQRCode(graphics);
            DrawCode39(graphics);
            DrawCode128(graphics);
            DrawCodePDF417(graphics);

            ZebraCardImageI imageData = graphics.CreateImage();
            return AddImage(CardSide.Front, PrintType.MonoK, 0, 0, -1, imageData);
        }
    }

    /// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;
    private static void DrawQRCode(ZebraGraphics graphics) {
        using (QRCodeUtil qrCode = ZebraBarcodeFactory.GetQRCode(graphics)) {
            qrCode.ValueToEncode = "https://www.zebra.com";
            qrCode.DrawBarcode(50, 50, 75, 75);
        }
    }

    /// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;
    private static void DrawCode39(ZebraGraphics graphics) {
        using (Code39Util code39 = ZebraBarcodeFactory.GetCode39(graphics)) {
            code39.ValueToEncode = "1234567890";
            code39.QuietZoneWidth = 0;
            code39.DrawBarcode(50, 175, 400, 75);
        }
    }

    /// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;
    private static void DrawCode128(ZebraGraphics graphics) {
        using (Code128Util code128 = ZebraBarcodeFactory.GetCode128(graphics)) {
            code128.ValueToEncode = "Code128 Test";
            code128.QuietZoneWidth = 0;
            code128.DrawBarcode(50, 325, 0, 0);
        }
    }

    /// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="Zebra.Sdk.Device.ZebraIllegalArgumentException"&gt;&lt;/exception&gt;
    private static void DrawCodePDF417(ZebraGraphics graphics) {
        using (CodePDF417Util codePdf417 = ZebraBarcodeFactory.GetCodePDF417(graphics)) {
            codePdf417.ValueToEncode = "Zebra Technologies";
            codePdf417.QuietZoneWidth = 0;
            codePdf417.DrawBarcode(50, 475, 300, 100);
        }
    }

    private static GraphicsInfo AddImage(CardSide side, PrintType printType, int xOffset, int yOffset, int fillColor, ZebraCardImageI zebraCardImage) {
        return new GraphicsInfo {
            Side = side,
            PrintType = printType,
            GraphicType = zebraCardImage != null ? GraphicType.BMP : GraphicType.NA,
            XOffset = xOffset,
            YOffset = yOffset,
            FillColor = fillColor,
            Opacity = 0,
            Overprint = false,
            GraphicData = zebraCardImage ?? null
        };
    }
    #endregion Graphics

    #region JobStatus
    /// &lt;exception cref="ArgumentException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="ConnectionException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="System.IO.IOException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="OverflowException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="Zebra.Sdk.Settings.SettingsException"&gt;&lt;/exception&gt;
    /// &lt;exception cref="Zebra.Sdk.Card.Exceptions.ZebraCardException"&gt;&lt;/exception&gt;
    private static JobStatusInfo PollJobStatus(int jobId, ZebraCardPrinter zebraCardPrinter) {
        JobStatusInfo jobStatusInfo = new JobStatusInfo();
        bool isFeeding = false;

        long start = Math.Abs(Environment.TickCount);
        while (true) {
            jobStatusInfo = zebraCardPrinter.GetJobStatus(jobId);

            if (!isFeeding) {
                start = Math.Abs(Environment.TickCount);
            }

            isFeeding = jobStatusInfo.CardPosition.Contains("feeding");

            string alarmDesc = jobStatusInfo.AlarmInfo.Value &gt; 0 ? $" ({jobStatusInfo.AlarmInfo.Description})" : "";
            string errorDesc = jobStatusInfo.ErrorInfo.Value &gt; 0 ? $" ({jobStatusInfo.ErrorInfo.Description})" : "";

            Console.WriteLine($"Job {jobId}: status:{jobStatusInfo.PrintStatus}, position:{jobStatusInfo.CardPosition}, alarm:{jobStatusInfo.AlarmInfo.Value}{alarmDesc}, error:{jobStatusInfo.ErrorInfo.Value}{errorDesc}");

            if (jobStatusInfo.PrintStatus.Contains("done_ok")) {
                break;
            } else if (jobStatusInfo.PrintStatus.Contains("error") || jobStatusInfo.PrintStatus.Contains("cancelled")) {
                Console.WriteLine($"The job encountered an error [{jobStatusInfo.ErrorInfo.Description}] and was cancelled.");
                break;
            } else if (jobStatusInfo.ErrorInfo.Value &gt; 0) {
                Console.WriteLine($"The job encountered an error [{jobStatusInfo.ErrorInfo.Description}] and was cancelled.");
                zebraCardPrinter.Cancel(jobId);
            } else if (jobStatusInfo.PrintStatus.Contains("in_progress") &amp;&amp; isFeeding) {
                if (Math.Abs(Environment.TickCount) &gt; start + CARD_FEED_TIMEOUT) {
                    Console.WriteLine("The job timed out waiting for a card and was cancelled.");
                    zebraCardPrinter.Cancel(jobId);
                }
            }

            Thread.Sleep(1000);
        }
        return jobStatusInfo;
    }
    #endregion JobStatus

    #region CleanUp
    private static void CloseQuietly(Connection connection, ZebraCardPrinter zebraCardPrinter) {
        try {
            if (zebraCardPrinter != null) {
                zebraCardPrinter.Destroy();
            }
        } catch { }

        try {
            if (connection != null) {
                connection.Close();
            }
        } catch { }
    }
    #endregion CleanUp
}</code>
                  </pre>
                </div>
              </div>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Constructors</h2>
            <div id="IDEEASection">
              <table id="ConstructorList" class="table is-hoverable">
                <tr>
                  <td>
                    <a href="ec06ce25-4af1-8e6f-0dee-3ad8a421c135.htm">ZebraBarcodeFactory</a>
                  </td>
                  <td>Initializes a new instance of the <span class="selflink">ZebraBarcodeFactory</span> class</td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Methods</h2>
            <div id="IDAEASection">
              <table id="MethodList" class="table is-hoverable">
                <tr>
                  <td>
                    <span class="noLink">Equals</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="ab63c754-d192-e6a1-cbba-13020e68301e.htm">GetCode128</a>
                  </td>
                  <td>
            Returns the barcode utilites class for Code128 barcodes.
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="00f0ff25-1798-5d09-8b7d-857a437b2d72.htm">GetCode39</a>
                  </td>
                  <td>
            Returns the barcode utilites class for Code39 barcodes.
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="055b7784-1705-471c-cc78-50d6b7d5e7d9.htm">GetCodeEAN13</a>
                  </td>
                  <td>
            Returns the barcode utilites class for EAN13 barcodes.
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="f059c804-65b1-db39-e8d5-ce359f0394e2.htm">GetCodeEAN8</a>
                  </td>
                  <td>
            Returns the barcode utilites class for EAN8 barcodes.
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="d5f4f316-cb98-5775-bffd-2398bdc8facd.htm">GetCodePDF417</a>
                  </td>
                  <td>
            Returns the barcode utilites class for EAN13 barcodes.
            </td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">GetHashCode</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="27907d87-c0b9-86ee-8f80-1e8aad441cbe.htm">GetQRCode</a>
                  </td>
                  <td>
            Returns the barcode utilites class for QRCode barcodes.
            </td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">GetType</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">ToString</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>See Also</h2>
            <div id="seeAlsoSection">
              <h4>Reference</h4>
              <div>
                <a href="bf2c7383-dfa8-637b-5ee9-0d805370e317.htm">Zebra.Sdk.Card.Graphics.Barcode Namespace</a>
              </div>
            </div>
          </div>
          <div id="InThisArticleColumn" class="column is-hidden-mobile">
            <nav class="menu sticky is-hidden">
              <p class="menu-label">
                <strong>In This Article</strong>
              </p>
              <ul id="InThisArticleMenu" class="menu-list">
                <li>
                  <a class="quickLink">Definition</a>
                </li>
                <li>
                  <a class="quickLink">Example</a>
                </li>
                <li>
                  <a class="quickLink">Constructors</a>
                </li>
                <li>
                  <a class="quickLink">Methods</a>
                </li>
                <li>
                  <a class="quickLink">See Also</a>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
      <footer id="PageFooter" class="footer border-top py-3 fixedFooter">
        <div class="columns">
          <div class="column">
            <p>© 2024 Zebra Technologies Corporation and/or its affiliates. All rights reserved.</p> 
				</div>
          <div class="column"> 
				</div>
        </div>
      </footer>
    </div>
    <script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script>
  </body>
</html>