<!DOCTYPE html >
<html lang="en-US">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" href="../css/bulma.css" />
    <link rel="stylesheet" href="../css/font-awesome.min.css" />
    <link rel="stylesheet" href="../css/presentationStyle.css" />
    <link rel="stylesheet" href="../css/vs.min.css" />
    <script src="../scripts/jquery-3.5.1.min.js"></script>
    <script src="../scripts/clipboard.min.js"></script>
    <script src="../scripts/highlight.min.js"></script>
    <script src="../scripts/presentationStyle.js"></script>
    <title>CertificateParser Class</title>
    <meta name="Title" content="CertificateParser" />
    <meta name="Help.Id" content="T:Zebra.Sdk.Certificate.CertificateParser" />
    <meta name="Help.ContentType" content="Reference" />
    <meta name="container" content="Zebra.Sdk.Certificate" />
    <meta name="guid" content="4be48696-b7a7-69ca-110e-6e92f7bb3145" />
    <meta name="Description" content="Takes in a certificate file (P12, DER, PEM, etc) and processes it into a ZebraCertificateInfo object which contains the selected certificate, Certificate Authority certificate chain, and private key (if applicable)." />
    <meta name="tocFile" content="../toc/IDTB.xml" />
  </head>
  <body>
    <div class="fixedLayout">
      <div id="Header" class="fixedHeader">
        <div class="pageHeader level mb-0 py-2 px-4">
          <div id="TitleContainer" class="level-left">
            <div id="DocumentationTitle" class="level-item">Zebra API (build v3.01.332)</div>
          </div>
          <div id="LangFilterSearchContainer" class="level-right">
            <div class="level-item">
              <div class="dropdown is-hoverable">
                <div class="dropdown-trigger">
                  <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                    <span id="CurrentLanguage"></span>
                    <span class="icon is-small">
                      <i class="fa fa-angle-down" aria-hidden="true"></i>
                    </span>
                  </button>
                </div>
                <div class="dropdown-menu" role="menu">
                  <div id="LanguageSelections" class="dropdown-content">
                    <a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a>
                  </div>
                </div>
              </div>
            </div>
            <div class="level-item">
              <form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;">
                <div class="field">
                  <div class="control has-icons-left">
                    <input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" />
                    <span class="icon is-small is-left">
                      <i class="fa fa-search"></i>
                    </span>
                    <button id="SearchButton" type="submit" class="is-hidden"></button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <div class="fixedContent">
        <nav class="breadcrumb my-1 px-2 border-bottom" role="navigation">
          <ul id="TopicBreadcrumbs" />
        </nav>
        <div class="columns pl-5 pr-5 fixedContent">
          <div id="ShowHideTOCColumn" class="column is-hidden-tablet">
            <a id="ShowHideTOC">Show/Hide TOC</a>
          </div>
          <div id="TOCColumn" class="column is-hidden-mobile">
            <nav class="toc">
              <ul id="TableOfContents" class="toc-menu" />
            </nav>
          </div>
          <div id="TopicContent" class="column content is-7">
            <h1>Certificate<wbr />Parser Class</h1>
            <div class="summary">
      Takes in a certificate file (P12, DER, PEM, etc) and processes it into a ZebraCertificateInfo object which contains 
      the selected certificate, Certificate Authority certificate chain, and private key (if applicable).
    </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Definition</h2>
            <div id="IDBSection">
              <strong>Namespace:</strong> <a href="bbc04ff5-eb3d-aa3f-4e2e-92b6da51eec6.htm">Zebra.Sdk.Certificate</a><br /><strong>Assembly:</strong> SdkApi.Core (in SdkApi.Core.dll) Version: 3.01.332<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">CertificateParser</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">CertificateParser</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">CertificateParser</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><span class="noLink">Object</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">CertificateParser</span></dd></dl></div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Example</h2>
            <div id="IDBCSection">
              <div class="codeSnippet">
                <div class="codeHeader">
                  <span class="codeHeaderTitle">C#</span>
                  <button class="button is-small is-light copyCode" title="Copy">
                    <span class="icon is-small">
                      <i class="fa fa-copy"></i>
                    </span>
                    <span>Copy</span>
                  </button>
                </div>
                <div class="codePanel hljs">
                  <pre xml:space="preserve">
                    <code class="language-cs">using System;
using System.IO;
using System.Text;
using Zebra.Sdk.Certificate;
using Zebra.Sdk.Comm;
using Zebra.Sdk.Printer;

public class CertificateParserExample {

    private const string PRIV_KEY_BASE_FILE_NAME = "PRIVKEY.NRD";
    private const string CA_CERT_BASE_FILE_NAME = "CACERTSV.NRD";
    private const string CLIENT_CERT_BASE_FILE_NAME = "CERTCLN.NRD";

    public static void Main(string[] args) {
        string path = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
        string p12File = Path.Combine(path, "certificate.p12");
        string password = "passwordForCertFile";

        FileInfo certFile = new FileInfo(p12File);
        if (!certFile.Exists) {
            Console.WriteLine($"The provided certificate file ({p12File}) cannot be found.");
            return;
        }

        Console.WriteLine($"Accessing certificate file {certFile.FullName}");

        Connection connection = new TcpConnection("1.2.3.4", 9100);
        ZebraPrinterLinkOs printer = null;

        try {
            connection.Open();
            printer = ZebraPrinterFactory.GetLinkOsPrinter(connection);

            using (FileStream certStream = new FileStream(certFile.FullName, FileMode.Open)) {
                ZebraCertificateInfo myCertificateInfo = CertificateParser.ParseCertificate(certStream, null, password);

                if (null != myCertificateInfo &amp;&amp; printer != null) {
                    if (myCertificateInfo.PrivateKey != null) {
                        string tempPath = Path.Combine(path, PRIV_KEY_BASE_FILE_NAME);
                        try {
                            using (FileStream fs = new FileStream(tempPath, FileMode.Create)) {
                                byte[] privateKey = Encoding.UTF8.GetBytes(myCertificateInfo.PrivateKey);
                                fs.Write(privateKey, 0, privateKey.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } finally {
                            File.Delete(tempPath);
                        }
                    }

                    if (myCertificateInfo.ClientCertificate != null) {
                        string tempPath = Path.Combine(path, CLIENT_CERT_BASE_FILE_NAME);
                        try {
                            using (FileStream fs = new FileStream(tempPath, FileMode.Create)) {
                                byte[] clientCertificate = Encoding.UTF8.GetBytes(myCertificateInfo.ClientCertificate);
                                fs.Write(clientCertificate, 0, clientCertificate.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } finally {
                            File.Delete(tempPath);
                        }
                    }

                    if (myCertificateInfo.GetCaChain() != null) {
                        string tempPath = Path.Combine(path, CA_CERT_BASE_FILE_NAME);
                        try {
                            using (FileStream fs = new FileStream(tempPath, FileMode.Create)) {
                                byte[] caChain = Encoding.UTF8.GetBytes(myCertificateInfo.GetCaChain());
                                fs.Write(caChain, 0, caChain.Length);
                            };
                            printer.StoreFileOnPrinter(tempPath);
                        } finally {
                            File.Delete(tempPath);
                        }
                    }
                }
            }

            printer.ResetNetwork();
        } catch (Exception e) {
            Console.WriteLine($"Error while setting up certificates: {e.Message}");
        } finally {
            if (connection != null) {
                connection.Close();
            }
        }
    }
}</code>
                  </pre>
                </div>
              </div>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Constructors</h2>
            <div id="IDEEASection">
              <table id="ConstructorList" class="table is-hoverable">
                <tr>
                  <td>
                    <a href="9de6ef16-cbea-f960-c2df-9a0a67fc1440.htm">CertificateParser</a>
                  </td>
                  <td>Initializes a new instance of the <span class="selflink">CertificateParser</span> class</td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Methods</h2>
            <div id="IDAEASection">
              <table id="MethodList" class="table is-hoverable">
                <tr>
                  <td>
                    <span class="noLink">Equals</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">GetHashCode</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">GetType</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="9186287f-6e72-03cd-7cfb-09de67cad6a8.htm">ParseCertificate</a>
                  </td>
                  <td>
            Takes in a certificate file (P12, DER, PEM, etc) and processes it into a ZebraCertificateInfo object which contains
            the selected certificate, Certificate Authority certificate chain, and private key (if applicable).
            </td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">ToString</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>See Also</h2>
            <div id="seeAlsoSection">
              <h4>Reference</h4>
              <div>
                <a href="bbc04ff5-eb3d-aa3f-4e2e-92b6da51eec6.htm">Zebra.Sdk.Certificate Namespace</a>
              </div>
            </div>
          </div>
          <div id="InThisArticleColumn" class="column is-hidden-mobile">
            <nav class="menu sticky is-hidden">
              <p class="menu-label">
                <strong>In This Article</strong>
              </p>
              <ul id="InThisArticleMenu" class="menu-list">
                <li>
                  <a class="quickLink">Definition</a>
                </li>
                <li>
                  <a class="quickLink">Example</a>
                </li>
                <li>
                  <a class="quickLink">Constructors</a>
                </li>
                <li>
                  <a class="quickLink">Methods</a>
                </li>
                <li>
                  <a class="quickLink">See Also</a>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
      <footer id="PageFooter" class="footer border-top py-3 fixedFooter">
        <div class="columns">
          <div class="column">
            <p>© 2024 Zebra Technologies Corporation and/or its affiliates. All rights reserved.</p> 
				</div>
          <div class="column"> 
				</div>
        </div>
      </footer>
    </div>
    <script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script>
  </body>
</html>