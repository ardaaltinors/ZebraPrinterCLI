<!DOCTYPE html >
<html lang="en-US">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" href="../css/bulma.css" />
    <link rel="stylesheet" href="../css/font-awesome.min.css" />
    <link rel="stylesheet" href="../css/presentationStyle.css" />
    <link rel="stylesheet" href="../css/vs.min.css" />
    <script src="../scripts/jquery-3.5.1.min.js"></script>
    <script src="../scripts/clipboard.min.js"></script>
    <script src="../scripts/highlight.min.js"></script>
    <script src="../scripts/presentationStyle.js"></script>
    <title>XmlPrinter Class</title>
    <meta name="Title" content="XmlPrinter" />
    <meta name="Help.Id" content="T:Zebra.Sdk.Printer.XmlPrinter" />
    <meta name="Help.ContentType" content="Reference" />
    <meta name="container" content="Zebra.Sdk.Printer" />
    <meta name="guid" content="8026e23d-26d4-5bd2-9f3e-a29cda0e523b" />
    <meta name="Description" content="A class used to print template formats using XML as input." />
    <meta name="tocFile" content="../toc/IDXB.xml" />
  </head>
  <body>
    <div class="fixedLayout">
      <div id="Header" class="fixedHeader">
        <div class="pageHeader level mb-0 py-2 px-4">
          <div id="TitleContainer" class="level-left">
            <div id="DocumentationTitle" class="level-item">Zebra API (build v3.01.332)</div>
          </div>
          <div id="LangFilterSearchContainer" class="level-right">
            <div class="level-item">
              <div class="dropdown is-hoverable">
                <div class="dropdown-trigger">
                  <button class="button" aria-haspopup="true" aria-controls="dropdown-menu">
                    <span id="CurrentLanguage"></span>
                    <span class="icon is-small">
                      <i class="fa fa-angle-down" aria-hidden="true"></i>
                    </span>
                  </button>
                </div>
                <div class="dropdown-menu" role="menu">
                  <div id="LanguageSelections" class="dropdown-content">
                    <a class="dropdown-item languageFilterItem" data-languageId="cs">C#</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="vb">VB</a>
                    <a class="dropdown-item languageFilterItem" data-languageId="cpp">C++</a>
                  </div>
                </div>
              </div>
            </div>
            <div class="level-item">
              <form id="SearchForm" action="#" onsubmit="TransferToSearchPage(); return false;">
                <div class="field">
                  <div class="control has-icons-left">
                    <input id="SearchTerms" class="input" type="text" maxlength="200" placeholder="Search" />
                    <span class="icon is-small is-left">
                      <i class="fa fa-search"></i>
                    </span>
                    <button id="SearchButton" type="submit" class="is-hidden"></button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <div class="fixedContent">
        <nav class="breadcrumb my-1 px-2 border-bottom" role="navigation">
          <ul id="TopicBreadcrumbs" />
        </nav>
        <div class="columns pl-5 pr-5 fixedContent">
          <div id="ShowHideTOCColumn" class="column is-hidden-tablet">
            <a id="ShowHideTOC">Show/Hide TOC</a>
          </div>
          <div id="TOCColumn" class="column is-hidden-mobile">
            <nav class="toc">
              <ul id="TableOfContents" class="toc-menu" />
            </nav>
          </div>
          <div id="TopicContent" class="column content is-7">
            <h1>Xml<wbr />Printer Class</h1>
            <div class="summary">
      A class used to print template formats using XML as input.
    </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Definition</h2>
            <div id="IDBSection">
              <strong>Namespace:</strong> <a href="1e3e78b3-b3c7-320c-3b01-de4d2e41beaf.htm">Zebra.Sdk.Printer</a><br /><strong>Assembly:</strong> SdkApi.Core (in SdkApi.Core.dll) Version: 3.01.332<div class="codeSnippet" data-codeSnippetLanguage="cs"><div class="codeHeader"><span class="codeHeaderTitle">C#</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cs"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">XmlPrinter</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="vb"><div class="codeHeader"><span class="codeHeaderTitle">VB</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-vb"><span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">XmlPrinter</span></code></pre></div></div><div class="codeSnippet is-hidden" data-codeSnippetLanguage="cpp"><div class="codeHeader"><span class="codeHeaderTitle">C++</span><span class="buttons"><button class="button is-small is-light copyCode" title="Copy"><span class="icon is-small"><i class="fa fa-copy"></i></span><span>Copy</span></button></span></div><div class="codePanel hljs"><pre xml:space="preserve"><code class="language-cpp"><span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">XmlPrinter</span></code></pre></div></div><dl class="inheritanceHierarchy"><dt>Inheritance</dt><dd><span class="noLink">Object</span>  <span class="icon is-small"><i class="fa fa-arrow-right"></i></span>  <span class="selflink">XmlPrinter</span></dd></dl></div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Example</h2>
            <div id="IDBCSection">
              <div class="codeSnippet">
                <div class="codeHeader">
                  <span class="codeHeaderTitle">C#</span>
                  <button class="button is-small is-light copyCode" title="Copy">
                    <span class="icon is-small">
                      <i class="fa fa-copy"></i>
                    </span>
                    <span>Copy</span>
                  </button>
                </div>
                <div class="codePanel hljs">
                  <pre xml:space="preserve">
                    <code class="language-cs">using System;
using System.IO;
using System.Text;
using Zebra.Sdk.Printer;

public class XmlPrinterExample {

    public static void Main(string[] args) {
        XmlPrintingExample();
        CnXmlPrintingExample();
    }

    /// These examples demonstrate how to use the one-line printing capability of the XmlPrinter class.
    ///
    /// They assume that a ZPL template containing variable fields appropriate to the XML data
    /// specified exists on the host device. In this case, a PC with the file named XmlPrinterExampleTemplate.zpl
    /// saved at "c:\XmlPrinterExampleTemplate.zpl". The contents of this file should be...
    /// 
    /// ^XA^DFXmlExamp.zpl^FS
    /// ^A0N,100,100^FO100,100^FN1"Name"^FS
    /// ^A0N,100,100^FO100,200^FN2"Street"^FS
    /// ^A0N,100,100^FO100,300^FN3"City"^FS
    /// ^A0N,100,100^FO100,400^FN4"State"^FS
    /// ^A0N,100,100^FO100,500^FN5"Zip"^FS
    /// ^XZ
    private static void XmlPrintingExample() {
        // The possible inputs to the one-line XML printing function(s)
        string destinationDevice = "192.168.1.32";

        string templateFilename = "c:\\XmlPrinterExampleTemplate.zpl";
        string defaultQuantityString = "1";
        bool verbose = true;

        // If the destination device argument is 'null' then any data that would have been
        // sent to a destination device, had one been specified, is captured in 'outputDataStream'.
        // This provides a way to test your output and configuration without having an actual
        // printer available or without wasting media even if a printer is available.
        Console.WriteLine("\nThe destinationDevice connection string argument is null:");
        try {
            using (MemoryStream outputDataStream = new MemoryStream()) {
                using (Stream sourceStream = GetSampleXmlData()) {
                    XmlPrinter.Print(null, sourceStream, templateFilename, defaultQuantityString, outputDataStream, verbose);
                    Console.WriteLine(Encoding.UTF8.GetString(outputDataStream.ToArray()));
                }
            }
        } catch (Exception e) {
            Console.WriteLine(e.ToString());
        }

        // The outputDataStream argument may be null, in which case the data generated by the XmlPrinter class will
        // not be logged but will be sent to the destination device.
        Console.WriteLine("\nThe outputDataStream argument is null:");
        try {
            using (Stream sourceStream = GetSampleXmlData()) {
                XmlPrinter.Print(destinationDevice, sourceStream, templateFilename, defaultQuantityString, null, verbose);
            }
        } catch (Exception e) {
            Console.WriteLine(e.ToString());
        }

        // Both destinationDevice connection string AND outputDataStream arguments may be specified, in which case the
        // data generated by the XmlPrinter class will be sent to the destination device and logged to the outputDataStream.
        Console.WriteLine("\nBoth destinationDevice connection string and outputDataStream arguments are specified:");
        try {
            using (MemoryStream outputDataStream = new MemoryStream()) {
                using (Stream sourceStream = GetSampleXmlData()) {
                    XmlPrinter.Print(destinationDevice, sourceStream, templateFilename, defaultQuantityString, outputDataStream, verbose);
                    Console.WriteLine(Encoding.UTF8.GetString(outputDataStream.ToArray()));
                }
            }
        } catch (Exception e) {
            Console.WriteLine(e.ToString());
        }

        // At least one of these two (destinationDevice connection string and outputDataStream) arguments should be specified.
    }

    private static Stream GetSampleXmlData() {
        string sampleXmlData =
            "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"
                + "&lt;file _FORMAT=\"XmlExamp.zpl\"&gt;"
                    + " &lt;label&gt;\n"
                        + "     &lt;variable name=\"Name\"&gt;John Smith&lt;/variable&gt;"
                        + "     &lt;variable name=\"Street\"&gt;1234 Anystreet&lt;/variable&gt;"
                        + "     &lt;variable name=\"City\"&gt;Anycity&lt;/variable&gt;"
                        + "     &lt;variable name=\"State\"&gt;Anystate&lt;/variable&gt;"
                        + "     &lt;variable name=\"Zip\"&gt;12345&lt;/variable&gt;"
                        + "  &lt;/label&gt;\n"
                        + " &lt;label&gt;\n"
                        + "     &lt;variable name=\"Name\"&gt;Jane Doe&lt;/variable&gt;"
                        + "     &lt;variable name=\"Street\"&gt;5678 Anyroad&lt;/variable&gt;"
                        + "     &lt;variable name=\"City\"&gt;Anytown&lt;/variable&gt;"
                        + "     &lt;variable name=\"State\"&gt;Anystate&lt;/variable&gt;"
                        + "     &lt;variable name=\"Zip\"&gt;67890&lt;/variable&gt;"
                        + "  &lt;/label&gt;\n"
                        + "&lt;/file&gt;";

        return new MemoryStream(Encoding.UTF8.GetBytes(sampleXmlData));
    }

    /// This example demonstrates how to use the one-line printing capability of the XmlPrinter class.
    /// 
    /// It assume that a ZPL template containing variable fields appropriate to the XML data
    /// specified exists on the host device. In this case, a PC with the file named CnXmlPrinterExampleTemplate.zpl
    /// saved at "c:\CnXmlPrinterExampleTemplate.zpl". The contents of this file should be...
    /// 
    /// ^XA^DFCnXmlPrinterExampleTemplate.zpl^FS
    /// ^A@N,75,75,E:ANMDS.TTF^CI28^FO0,100^FN1"Customer Name"^FS
    /// ^A@N,75,75,E:ANMDS.TTF^FO0,200^FN2"Component Name"^FS^
    /// ^A@N,75,75,E:ANMDS.TTF^FO0,300^FN3"Vendor Name"^FS
    /// ^A@N,75,75,E:ANMDS.TTF^FO0,400^FN4"Vendor ID"^FS
    /// ^A@N,75,75,E:ANMDS.TTF^FO0,500^FN5"Invoice Number"^FS
    /// ^XZ
    private static void CnXmlPrintingExample() {
        // The possible inputs to the one-line XML printing function(s)
        string destinationDevice = "192.168.1.32";

        string templateFilename = "C:\\CnXmlPrinterExampleTemplate.zpl";
        string defaultQuantityString = "1";
        bool verbose = true;

        // The outputDataStream argument may be null, in which case the data generated by the XmlPrinter class will
        // not be logged but will be sent to the destination device.
        Console.WriteLine("\nThe outputDataStream argument is null:");
        try {
            using (Stream sourceStream = GetSampleCnXmlData()) {
                XmlPrinter.Print(destinationDevice, sourceStream, templateFilename, defaultQuantityString, null, verbose);
            }
        } catch (Exception e) {
            Console.WriteLine(e.ToString());
        }
    }

    private static Stream GetSampleCnXmlData() {
        string sampleXmlData =
            "&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"
                + "&lt;file _FORMAT=\"XmlExamp.zpl\"&gt;"
                + " &lt;label&gt;\n"
                + "     &lt;variable name=\"Customer Name\"&gt;东风伟世通汽车饰件系统有限公司&lt;/variable&gt;"
                + "     &lt;variable name=\"Component Name\"&gt;驾驶员侧仪表板下装饰件&lt;/variable&gt;"
                + "     &lt;variable name=\"Vendor Name\"&gt;供应商名称&lt;/variable&gt;"
                + "     &lt;variable name=\"Vendor ID\"&gt;供应商代码&lt;/variable&gt;"
                + "     &lt;variable name=\"Invoice Number\"&gt;订单号&lt;/variable&gt;"
                + " &lt;/label&gt;\n"
                + "&lt;/file&gt;";

        return new MemoryStream(Encoding.UTF8.GetBytes(sampleXmlData));
    }
}</code>
                  </pre>
                </div>
              </div>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>Methods</h2>
            <div id="IDAEASection">
              <table id="MethodList" class="table is-hoverable">
                <tr>
                  <td>
                    <span class="noLink">Equals</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">GetHashCode</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">GetType</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
                <tr>
                  <td>
                    <a href="6c43ac69-cd2f-6f6d-12a2-c223733c8906.htm">Print(Stream, String, String, Stream)</a>
                  </td>
                  <td>
            Print template formats using XML as input data.
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="d3480d02-1400-bb4f-f3f7-6979ff0df9c7.htm">Print(Stream, String, String, Stream, Boolean)</a>
                  </td>
                  <td>
            Print template formats using XML as input data with optional running commentary to standard out.
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="894413f0-6e9c-8438-5109-d97c35546a98.htm">Print(String, Stream, String, String, Stream)</a>
                  </td>
                  <td>
            Print template formats using XML as input data to <span class="code">destinationDevice</span>.
            </td>
                </tr>
                <tr>
                  <td>
                    <a href="ff9a9af7-3d00-5714-d515-03e8553a3292.htm">Print(String, Stream, String, String, Stream, Boolean)</a>
                  </td>
                  <td>
            Print template formats using XML as input data to a device with connection string <span class="code">destinationDevice</span>.
            </td>
                </tr>
                <tr>
                  <td>
                    <span class="noLink">ToString</span>
                  </td>
                  <td>
                    <br />(Inherited from <span class="noLink">Object</span>)</td>
                </tr>
              </table>
            </div>
            <h2 class="quickLinkHeader">
              <span class="icon toggleSection" tabindex="0">
                <i class="fa fa-angle-down"></i>
              </span>See Also</h2>
            <div id="seeAlsoSection">
              <h4>Reference</h4>
              <div>
                <a href="1e3e78b3-b3c7-320c-3b01-de4d2e41beaf.htm">Zebra.Sdk.Printer Namespace</a>
              </div>
            </div>
          </div>
          <div id="InThisArticleColumn" class="column is-hidden-mobile">
            <nav class="menu sticky is-hidden">
              <p class="menu-label">
                <strong>In This Article</strong>
              </p>
              <ul id="InThisArticleMenu" class="menu-list">
                <li>
                  <a class="quickLink">Definition</a>
                </li>
                <li>
                  <a class="quickLink">Example</a>
                </li>
                <li>
                  <a class="quickLink">Methods</a>
                </li>
                <li>
                  <a class="quickLink">See Also</a>
                </li>
              </ul>
            </nav>
          </div>
        </div>
      </div>
      <footer id="PageFooter" class="footer border-top py-3 fixedFooter">
        <div class="columns">
          <div class="column">
            <p>© 2024 Zebra Technologies Corporation and/or its affiliates. All rights reserved.</p> 
				</div>
          <div class="column"> 
				</div>
        </div>
      </footer>
    </div>
    <script>$(function(){
SetDefaultLanguage("cs");
LoadTocFile(null, null);
InitializeQuickLinks();

$(".toggleSection" ).click(function () {
    SectionExpandCollapse(this);
});

$(".toggleSection").keypress(function () {
    SectionExpandCollapseCheckKey(this, event)
});
hljs.highlightAll();
});</script>
  </body>
</html>